local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait() -- 保留一次声明并等待角色加载
local tool

-- 查找SyncAPI所在工具
for i,v in ipairs(player:GetDescendants()) do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end
for i,v in ipairs(game.ReplicatedStorage:GetDescendants()) do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

-- 空值校验，避免远程服务未找到时报错
local remote = tool and tool.SyncAPI:FindFirstChild("ServerEndpoint") or nil
if not remote then
    warn("SyncAPI ServerEndpoint not found, code cannot execute")
    return
end

-- 远程调用封装函数
function _(args)
    if remote then
        remote:InvokeServer(unpack(args))
    end
end

-- 核心功能函数（保留原有逻辑，仅补充空值校验）
function SetCollision(part,boolean)
    if not part then warn("SetCollision: Part is nil") return end
    local args = {
        [1] = "SyncCollision",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["CanCollide"] = boolean
            }
        }
    }
    _(args)
end

function SetAnchor(boolean,part)
    if not part then warn("SetAnchor: Part is nil") return end
    local args = {
        [1] = "SyncAnchor",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Anchored"] = boolean
            }
        }
    }
    _(args)
end

function CreatePart(cf,parent)
    if not cf then warn("CreatePart: CFrame is nil") return end
    local args = {
        [1] = "CreatePart",
        [2] = "Normal",
        [3] = cf,
        [4] = parent or workspace
    }
    -- 返回创建的零件实例，用于后续操作
    return remote:InvokeServer(unpack(args))
end

function DestroyPart(part)
    if not part then warn("DestroyPart: Part is nil") return end
    local args = {
        [1] = "Remove",
        [2] = {
            [1] = part
        }
    }
    _(args)
end

function MovePart(part,cf)
    if not part or not cf then warn("MovePart: Incomplete parameters") return end
    local args = {
        [1] = "SyncMove",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["CFrame"] = cf
            }
        }
    }
    _(args)
end

function Resize(part,size,cf)
    if not part or not size or not cf then warn("Resize: Incomplete parameters") return end
    local args = {
        [1] = "SyncResize",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["CFrame"] = cf,
                ["Size"] = size
            }
        }
    }
    _(args)
end

function AddMesh(part)
    if not part then warn("AddMesh: Part is nil") return end
    local args = {
        [1] = "CreateMeshes",
        [2] = {
            [1] = {
                ["Part"] = part
            }
        }
    }
    _(args)
end

function SetMesh(part,meshid)
    if not part or not meshid then warn("SetMesh: Incomplete parameters") return end
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["MeshId"] = "rbxassetid://"..meshid
            }
        }
    }
    _(args)
end

function SetTexture(part, texid)
    if not part or not texid then warn("SetTexture: Incomplete parameters") return end
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["TextureId"] = "rbxassetid://"..texid
            }
        }
    }
    _(args)
end

function SetName(part, stringg)
    if not part or not stringg then warn("SetName: Incomplete parameters") return end
    local args = {
        [1] = "SetName",
        [2] = {
            [1] = workspace.Part
        },
        [3] = stringg
    }
    _(args)
end

function MeshResize(part,size)
    if not part or not size then warn("MeshResize: Incomplete parameters") return end
    local args = {
        [1] = "SyncMesh",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Scale"] = size
            }
        }
    }
    _(args)
end

function Weld(part1, part2,lead)
    if not part1 or not part2 then warn("Weld: Incomplete parameters") return end
    local args = {
        [1] = "CreateWelds",
        [2] = {
            [1] = part1,
            [2] = part2
        },
        [3] = lead
    }
    _(args)
end

function SetLocked(part,boolean)
    if not part then warn("SetLocked: Part is nil") return end
    local args = {
        [1] = "SetLocked",
        [2] = {
            [1] = part
        },
        [3] = boolean
    }
    _(args)
end

function SetTrans(part,int)
    if not part or not int then warn("SetTrans: Incomplete parameters") return end
    local args = {
        [1] = "SyncMaterial",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["Transparency"] = int
            }
        }
    }
    _(args)
end

function CreateSpotlight(part)
    if not part then warn("CreateSpotlight: Part is nil") return end
    local args = {
        [1] = "CreateLights",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["LightType"] = "SpotLight"
            }
        }
    }
    _(args)
end

function SyncLighting(part,brightness)
    if not part or not brightness then warn("SyncLighting: Incomplete parameters") return end
    local args = {
        [1] = "SyncLighting",
        [2] = {
            [1] = {
                ["Part"] = part,
                ["LightType"] = "SpotLight",
                ["Brightness"] = brightness
            }
        }
    }
    _(args)
end

-- 角色隐身函数（补充零件存在性判断）
function xd()
    spawn(function()
        local localChar = player.Character
        if not localChar then return end
        local partsToHide = {
            localChar:FindFirstChild("Torso"),
            localChar:FindFirstChild("Left Leg"),
            localChar:FindFirstChild("HumanoidRootPart"),
            localChar:FindFirstChild("Right Leg"),
            localChar:FindFirstChild("Right Arm"),
            localChar:FindFirstChild("Left Arm"),
            localChar:FindFirstChild("Head")
        }
        local args = {
            [1] = "SyncMaterial",
            [2] = {}
        }
        for i, part in ipairs(partsToHide) do
            if part then
                table.insert(args[2], {
                    ["Part"] = part,
                    ["Transparency"] = 1
                })
            end
        end
        _(args)
    end)
end

-- 主功能函数（修复零件实例获取问题）
function Thomas(player)
    local humanoidRootPart = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoidRootPart or not humanoid then warn("Critical character parts missing") return end
    
    SetAnchor(true, humanoidRootPart)
    -- 获取创建的零件实例，替换原有的char.Part
    local newPart = CreatePart(humanoidRootPart.CFrame, char) -- 删除多余的"Normal"参数
    if not newPart then warn("Failed to create part") return end
    
    SetCollision(newPart, false)
    SetLocked(newPart, false)
    Resize(newPart, Vector3.new(5,5,10), humanoidRootPart.CFrame)
    CreateSpotlight(newPart)
    SyncLighting(newPart, 100)
    SetLocked(humanoidRootPart, false)
    Weld(newPart, humanoidRootPart, newPart)
    SetAnchor(false, newPart)
    AddMesh(newPart)
    MeshResize(newPart, Vector3.new(2,2,1.5))
    SetMesh(newPart, "2231280549")
    SetTexture(newPart, "2231280614")
    SetAnchor(false, humanoidRootPart)
    humanoid.WalkSpeed = 80
    
    -- 音效创建函数（保留原有逻辑）
    local function SFX(id) 
        local s = Instance.new("Sound", char:FindFirstChild("Torso"))
        s.SoundId = "rbxassetid://"..id
        s.Volume = 1
        return s
    end
    
    -- Touched事件（补充空值容错）
    newPart.Touched:connect(function(p)
        if p.Parent then
            if p.Parent:IsA("Model") then
                local targetPlayer = game.Players:FindFirstChild(p.Parent.Name)
                if targetPlayer and targetPlayer.Name ~= player.Name then
                    local targetChar = targetPlayer.Character
                    if targetChar then
                        spawn(function()
                            DestroyPart(targetChar:FindFirstChild("Head"))
                        end)
                        local Whistle = SFX(475073913)
                        if Whistle then Whistle:Play() end
                    end
                end
            end
        end
    end)

    local Music = SFX(0)
    if Music then
        Music.Pitch = 1.15
        Music:Play()
    end

    -- 保留原有RenderStepped循环
    game:GetService("RunService").RenderStepped:Connect(function()
        for i,v in ipairs(char:GetDescendants()) do
            if v:IsA("BasePart") then
                humanoid.WalkSpeed = 70
                v.CanCollide = false
            end
        end
    end)
end

-- 执行主函数
Thomas(player)
xd()
